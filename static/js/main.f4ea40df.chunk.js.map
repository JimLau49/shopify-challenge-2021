{"version":3,"sources":["components/like-button.tsx","components/event-tile.tsx","components/loading-spinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LikeButton","liked","onClick","className","role","EventTile","title","date","explaination","imageUrl","mediaType","useState","setLiked","width","height","src","frameBorder","allow","allowFullScreen","alt","override","css","LoadingSpinner","loading","color","size","App","data","setData","setLoading","today","Date","fiveDaysAgo","setDate","getDate","startDate","setStartDate","useEffect","getApodData","getFormattedDate","axios","get","then","res","year","getFullYear","month","getMonth","toString","length","day","eventTiles","map","object","index","explanation","url","media_type","reverse","selected","onChange","name","dateFormat","maxDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4ea40df.chunk.js","sourcesContent":["import \"./like-button.scss\";\r\n\r\nexport interface ILikeButton {\r\n  liked: boolean;\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n}\r\n\r\nexport const LikeButton = ({ liked, onClick = () => ({}) }: ILikeButton) => {\r\n  return (\r\n    <>\r\n      {liked ? (\r\n        <button className=\"liked\" aria-pressed=\"true\" onClick={onClick}>\r\n          <span role=\"img\" aria-label=\"sparkling heart\">\r\n            üöÄ\r\n          </span>\r\n        </button>\r\n      ) : (\r\n        <button className=\"like\" aria-pressed=\"false\" onClick={onClick}>\r\n          <span role=\"img\" aria-label=\"heart\">\r\n            ‚ù§Ô∏è\r\n          </span>\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","import { useState } from \"react\";\r\nimport \"./event-tile.scss\";\r\nimport LikeButton from \"./like-button\";\r\n\r\nexport interface IEventTileProps {\r\n  key: string;\r\n  title: string;\r\n  date: string;\r\n  explaination: string;\r\n  imageUrl: string;\r\n  mediaType: \"image\" | \"video\";\r\n}\r\n\r\nexport const EventTile = ({\r\n  title,\r\n  date,\r\n  explaination,\r\n  imageUrl,\r\n  mediaType,\r\n}: IEventTileProps) => {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setLiked(!liked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"event-tile__container\">\r\n      <div className=\"event-tile__info\">\r\n        {mediaType === \"video\" ? (\r\n          <iframe\r\n            width=\"100%\"\r\n            height=\"480\"\r\n            src={imageUrl}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            title=\"Apod Video\"\r\n            aria-label=\"Embeded Youtube Video Player\"\r\n          />\r\n        ) : (\r\n          <img\r\n            className=\"event-tile__image\"\r\n            src={imageUrl}\r\n            alt=\"NASA Apod\"\r\n          ></img>\r\n        )}\r\n\r\n        <div className=\"event-tile__event-title\">\r\n          <span>{title}</span>\r\n          <span className=\"event-tile__date\">{date}</span>\r\n        </div>\r\n        <p className=\"event-tile__description-text\">{explaination}</p>\r\n        <div className=\"event-tile__like-container\">\r\n          <LikeButton liked={liked} onClick={handleClick} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventTile;\r\n","import { css } from \"@emotion/react\";\r\nimport HashLoader from \"react-spinners/HashLoader\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LoadingSpinner = (loading: boolean) => {\r\n  const color = \"#ffffff\";\r\n  return (\r\n    <div className=\"sweet-loading\">\r\n      <HashLoader color={color} loading={loading} css={override} size={70} />\r\n    </div>\r\n  );\r\n};\r\nexport default LoadingSpinner;\r\n","import \"./App.css\";\r\nimport \"./components/event-tile\";\r\nimport { EventTile, IEventTileProps } from \"./components/event-tile\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport LoadingSpinner from \"./components/loading-spinner\";\r\n\r\nexport interface INasaApod {\r\n  date: string;\r\n  explanation: string;\r\n  hdurl?: string;\r\n  media_type: \"image\" | \"video\";\r\n  service_version: string;\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\nexport const App = () => {\r\n  const [data, setData] = useState<INasaApod[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const today = new Date();\r\n  const fiveDaysAgo = new Date(today);\r\n  fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\r\n\r\n  const [startDate, setStartDate] = useState<Date>(fiveDaysAgo);\r\n\r\n  useEffect(() => {\r\n    getApodData(fiveDaysAgo);\r\n  }, []);\r\n\r\n  const getApodData = (date: Date) => {\r\n    const startDate = getFormattedDate(date);\r\n    setLoading(true);\r\n\r\n    axios\r\n      .get(\r\n        `https://api.nasa.gov/planetary/apod?api_key=zUeHUtgPEYyhRZBf8fCa6w5htRYrZwoWlqFXPZV6&start_date=${startDate}`\r\n      )\r\n      .then((res) => {\r\n        setData(res.data) as unknown as IEventTileProps;\r\n        setStartDate(date);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const getFormattedDate = (date: Date) => {\r\n    const year = date.getFullYear();\r\n\r\n    let month = (1 + date.getMonth()).toString();\r\n    month = month.length > 1 ? month : \"0\" + month;\r\n\r\n    let day = date.getDate().toString();\r\n    day = day.length > 1 ? day : \"0\" + day;\r\n\r\n    return year + \"-\" + month + \"-\" + day;\r\n  };\r\n\r\n  const eventTiles = data\r\n    .map((object, index) => (\r\n      <EventTile\r\n        key={`eventTile-${index}`}\r\n        title={object.title}\r\n        date={object.date}\r\n        explaination={object.explanation}\r\n        imageUrl={object.url}\r\n        mediaType={object.media_type}\r\n      />\r\n    ))\r\n    .reverse();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header-container\">\r\n        <span className=\"event-tile__title\">Spacestagram</span>\r\n        <span className=\"event-tile__subtitle\">\r\n          Brought to you by NASA&apos;s image API\r\n        </span>\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={getApodData}\r\n          name=\"startDate\"\r\n          dateFormat=\"MM/dd/yyyy\"\r\n          maxDate={new Date()}\r\n        />\r\n      </div>\r\n      <div className=\"event-tile-list\">\r\n        {loading ? <LoadingSpinner {...loading} /> : eventTiles}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}